<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
namespace <#= Model.Namespace #>
{
    using <#= Model.OriginalNamespace #>;
    using Jint;
    using Jint.Native;
    using Jint.Native.Object;
    using Jint.Native.Function;
    using Jint.Runtime;
    using Jint.Runtime.Interop;
    using System;

    sealed partial class <#= Model.Name #>Constructor : FunctionInstance, IConstructor
    {
        readonly EngineInstance _engine;

        public <#= Model.Name #>Constructor(EngineInstance engine)
            : base(engine.Jint, null, null, false)
        {
            _engine = engine;
<# foreach (var constant in Model.Constants) { #>
            FastAddProperty("<#= constant.Name #>", <#= constant.Value #>, false, true, false);
<# } #>
        }

        public <#= Model.Name #>Prototype PrototypeObject 
        { 
            get; 
            private set; 
        }

        public static <#= Model.Name #>Constructor CreateConstructor(EngineInstance engine)
        {
            var obj = new <#= Model.Name #>Constructor(engine);
            obj.Extensible = true;
            obj.Prototype = engine.Jint.Function.PrototypeObject;
            obj.PrototypeObject = <#= Model.Name #>Prototype.CreatePrototypeObject(engine, obj);
            obj.FastAddProperty("length", <#= Model.ConstructorLength #>, false, false, false);
            obj.FastAddProperty("prototype", obj.PrototypeObject, false, false, false);
            return obj;
        }

        public override JsValue Call(JsValue thisObject, JsValue[] arguments)
        {
            throw new JavaScriptException(Engine.TypeError);
        }

        public ObjectInstance Construct(JsValue[] arguments)
        {
<# foreach (var constructor in Model.Constructors) { #>
            if (arguments.Length == <#= constructor.Parameters.Count() #>)
            {
<# foreach (var parameter in constructor.Parameters) { #>
                var <#= parameter.Name #> = <#= parameter.Converter #>(arguments.At(<#= parameter.Index #>));
<# } #>
                var reference = new <#= Model.OriginalName #>(<#= constructor.Parameters.Stringify() #>);
                return new <#= Model.Name #>Instance(_engine)
                {
                    Prototype = PrototypeObject,
                    Ref<#= Model.Name #> = reference,
                    Extensible = true
                };
            }
<# } #>
            throw new JavaScriptException(Engine.TypeError);         
        }
    }
}