<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
namespace <#= Model.Namespace #>
{
    using <#= Model.OriginalNamespace #>;
    using Jint;
    using Jint.Runtime;
    using Jint.Native;
    using Jint.Native.Object;
    using System;

    partial class <#= Model.Name #>Instance : <#= Model.BaseName #>Instance
    {
        readonly EngineInstance _engine;

        public <#= Model.Name #>Instance(EngineInstance engine)
            : base(engine<#= (Model.BaseName == "Object" ? ".Jint" : "") #>)
        {
            _engine = engine;
<# foreach (var field in Model.Fields) { #>
            FastAddProperty("<#= field.Name #>", <#= field.Value #>, false, true, false);
<# } #>
        }

        public static <#= Model.Name #>Instance Create<#= Model.Name #>Object(EngineInstance engine)
        {
            var obj = new <#= Model.Name #>Instance(engine);
            obj.Extensible = true;
            obj.Prototype = engine.Jint.Object.PrototypeObject;            
            return obj;
        }

        public override String Class
        {
            get { return "<#= Model.Name #>"; }
        }
<# if (Model.Getters.Any()) { #>
        
        public override JsValue Get(String propertyName)
        {
<# foreach (var method in Model.Getters) { #>
<# var type = method.Parameters.First().ParameterType; #>
<# if (type == typeof(Int32)) { #>
            var index = default(Int32);

            if (Int32.TryParse(propertyName, out index))
<# if (String.IsNullOrEmpty(method.RefName)) { #>
                return _engine.GetDomNode(Ref<#= Model.Name #>[index]);
<# } else { #>
                return _engine.GetDomNode(Ref<#= Model.Name #>.<#= method.RefName #>(index));
<# } #>
<# } else if (type == typeof(String)) { #>
            if (propertyName != null)
<# if (String.IsNullOrEmpty(method.RefName)) { #>
                return _engine.GetDomNode(Ref<#= Model.Name #>[propertyName]);
<# } else { #>
                return _engine.GetDomNode(Ref<#= Model.Name #>.<#= method.RefName #>(propertyName));
<# } #>

<# } #>
<# } #>
            return base.Get(propertyName);
        }

<# } #>
<# if (Model.Setters.Any()) { #>
        
        public override void Put(String propertyName, JsValue value, Boolean throwOnError)
        {
<# foreach (var method in Model.Setters) { #>
<# var type = method.Parameters.Skip(0).First().ParameterType; #>
<# if (type == typeof(Int32)) { #>
            var index = default(Int32);

            if (Int32.TryParse(propertyName, out index))
            {
<# if (String.IsNullOrEmpty(method.RefName)) { #>
                Ref<#= Model.Name #>[index] = <#= method.Converter #>(value);
<# } else { #>
<# var arg = method.Parameters.Skip(1).First(); #>
                Ref<#= Model.Name #>.<#= method.RefName #>(index, <#= arg.Converter #>(value));
<# } #>
                return;
            }

<# } else if (type == typeof(String)) { #>
            if (propertyName != null)
            {
<# if (String.IsNullOrEmpty(method.RefName)) { #>
                Ref<#= Model.Name #>[propertyName] = <#= method.Converter #>(value);
<# } else { #>
<# var arg = method.Parameters.Skip(1).First(); #>
                Ref<#= Model.Name #>.<#= method.RefName #>(propertyName, <#= arg.Converter #>(value));
<# } #>
                return;
            }

<# } #>
<# } #>
            base.Put(propertyName, value, throwOnError);
        }

<# } #>
<# if (Model.Deleters.Any()) { #>
        
        public override Boolean Delete(String propertyName, Boolean throwOnError)
        {
<# foreach (var method in Model.Deleters) { #>
<# var type = method.Parameters.First().ParameterType; #>
<# if (type == typeof(Int32)) { #>
            var index = default(Int32);

            if (Int32.TryParse(propertyName, out index))
            {
                Ref<#= Model.Name #>.<#= method.OriginalName #>(propertyName);
                return true;
            }

<# } else if (type == typeof(String)) { #>
            if (propertyName != null)
            {
                Ref<#= Model.Name #>.<#= method.OriginalName #>(propertyName);
                return true;
            }

<# } #>
<# } #>
            return base.Delete(propertyName, throwOnError);
        }
<# } #>

        public <#= Model.OriginalName #><#= Model.GenericArguments #> Ref<#= Model.Name #>
        {
            get;
            set;
        }
    }
}