<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
namespace <#= Model.Namespace #>
{
    using <#= Model.OriginalNamespace #>;
    using Jint;
    using Jint.Native;
    using Jint.Native.Object;
    using Jint.Runtime;
    using Jint.Runtime.Descriptors;
    using Jint.Runtime.Interop;
    using System;

    sealed partial class <#= Model.Name #>Prototype : <#= Model.Name #>Instance
    {
        public <#= Model.Name #>Prototype(Engine engine)
            : base(engine)
        {
            FastAddProperty("toString", Engine.AsValue(ToString), true, true, true);
<# foreach (var method in Model.Methods) { #>
            FastAddProperty("<#= method.Name #>", Engine.AsValue(<#= method.RefName #>), true, true, true);
<# } #>
<# foreach (var property in Model.Properties) { #>
            FastSetProperty("<#= property.Name #>", Engine.AsProperty(<#= property.Call #>));
<# } #>
<# foreach (var evt in Model.Events) { #>
            FastSetProperty("<#= evt.Name #>", Engine.AsProperty(Get<#= evt.RefName #>, Set<#= evt.RefName #>));
<# } #>
        }

        public static <#= Model.Name #>Prototype CreatePrototypeObject(EngineInstance engine, <#= Model.Name #>Constructor constructor)
        {
            var obj = new <#= Model.Name #>Prototype(engine.Jint)
            {
                Prototype = <#= Model.Prototype #>,
                Extensible = true,
            };
            obj.FastAddProperty("constructor", constructor, true, false, true);
            return obj;
        }
<# foreach (var method in Model.Methods) { #>

        JsValue <#= method.RefName #>(JsValue thisObj, JsValue[] arguments)
        {
            var reference = thisObj.TryCast<<#= Model.Name #>Instance>(Fail).Ref<#= Model.Name #>;
<# foreach (var parameter in method.Parameters) { #>
            var <#= parameter.Name #> = <#= parameter.Converter #>(arguments.At(<#= parameter.Index #>));
<# } #>
<# if (method.IsVoid) { #>
            reference.<#= method.OriginalName #>(<#= method.Parameters.Stringify() #>);
            return JsValue.Undefined;
<# } else { #>
            return Engine.Select(reference.<#= method.OriginalName #>(<#= method.Parameters.Stringify() #>));
<# } #>
        }
<# } #>
<# foreach (var property in Model.Properties) { #>
<# if (!property.Getter.IsVoid) { #>

        JsValue <#= property.Getter.RefName #>(JsValue thisObj)
        {
            var reference = thisObj.TryCast<<#= Model.Name #>Instance>(Fail).Ref<#= Model.Name #>;
            return Engine.Select(reference.<#= property.Getter.OriginalName #>);
        }
<# } #>

<# if (!property.Setter.IsVoid) { #>
        void <#= property.Setter.RefName #>(JsValue thisObj, JsValue argument)
        {
<# var parameter = property.Setter.Parameters.First(); #>
            var reference = thisObj.TryCast<<#= Model.Name #>Instance>(Fail).Ref<#= Model.Name #>;
            var <#= parameter.Name #> = <#= parameter.Converter #>(argument);
            reference.<#= property.Setter.OriginalName #> = <#= parameter.Name #>;
        }
<# } #>
<# } #>
<# foreach (var evt in Model.Events) { #>

        JsValue Get<#= evt.RefName #>(JsValue thisObj)
        {
            var instance = thisObj.TryCast<<#= Model.Name #>Instance>(Fail);
            return instance.Get("<#= evt.Name #>");
        }

        void Set<#= evt.RefName #>(JsValue thisObj, JsValue argument)
        {
            var instance = thisObj.TryCast<<#= Model.Name #>Instance>(Fail);
            var reference = instance.Ref<#= Model.Name #>;
            var existing = Get<#= evt.RefName #>(thisObj);

            if (existing != JsValue.Undefined)
            {
                var method = <#= evt.Converter #>(existing);
                reference.<#= evt.OriginalName #> -= method;
            }

            instance.Put("<#= evt.Name #>", argument, false);

            if (argument != JsValue.Undefined)
            {
                var method = <#= evt.Converter #>(argument);
                reference.<#= evt.OriginalName #> += method;
            }
        }
<# } #>

        JsValue ToString(JsValue thisObj, JsValue[] arguments)
        {
            return "[object <#= Model.Name #>]";
        }

        void Fail(JsValue obsolete)
        {
            throw new JavaScriptException(Engine.TypeError);
        }
    }
}