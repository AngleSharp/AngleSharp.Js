<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

namespace <#= Model.Namespace #>
{
    using <#= Model.OriginalNamespace #>;
    using Jint;
    using Jint.Native;
    using Jint.Native.Object;
    using Jint.Native.Function;
    using Jint.Runtime;
    using Jint.Runtime.Interop;
    using System;

    partial sealed class <#= Model.Name #>Constructor : FunctionInstance, IConstructor
    {
        public <#= Model.Name #>Constructor(Engine engine)
            : base(engine, null, null, false)
        {
        }

        public <#= Model.Name #>Prototype PrototypeObject 
        { 
            get; 
            private set; 
        }

        public static <#= Model.Name #>Constructor CreateConstructor(Engine engine)
        {
            var obj = new <#= Model.Name #>Constructor(engine);
            obj.Extensible = true;
            obj.Prototype = engine.Function.PrototypeObject;
            obj.PrototypeObject = <#= Model.Name #>Prototype.CreatePrototypeObject(engine, obj);
            obj.FastAddProperty("length", <#= Model.Parameters.Count() #>, false, false, false);
            obj.FastAddProperty("prototype", obj.PrototypeObject, false, false, false);
            return obj;
        }

        public override JsValue Call(JsValue thisObject, JsValue[] arguments)
        {
            return PrototypeObject.ToString(Construct(Arguments.Empty), Arguments.Empty);
        }

        public ObjectInstance Construct(JsValue[] arguments)
        {
            <# foreach (var parameter in Model.Parameters) { #>
            var <#= parameter.Name #> = <#= parameter.Converter #>(arguments.At(<#= parameter.Index #>));
            <# } #>
            var ref = new <#= Model.OriginalName #>(<#= Model.Parameters.Stringify() #>);
            return new <#= Model.Name #>Instance(Engine)
            {
                Prototype = PrototypeObject,
                Ref = ref,
                Extensible = true
            };
        }
    }
}