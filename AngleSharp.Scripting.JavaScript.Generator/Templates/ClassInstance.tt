<#@ template language="C#" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
namespace <#= Model.Namespace #>
{
    using <#= Model.OriginalNamespace #>;
    using Jint;
    using Jint.Native;
    using Jint.Native.Object;
    using System;

    partial class <#= Model.Name #>Instance : <#= Model.BaseName #>Instance
    {
        public <#= Model.Name #>Instance(Engine engine)
            : base(engine)
        {
        }

        public static <#= Model.Name #>Instance Create<#= Model.Name #>Object(Engine engine)
        {
            var obj = new <#= Model.Name #>Instance(engine);
            obj.Extensible = true;
            obj.Prototype = engine.Object.PrototypeObject;            
            return obj;
        }

<#if (Model.Fields.Any()) { #>
        public void Configure<#= Model.Name #>()
        {
<# foreach (var field in Model.Fields) { #>
            FastAddProperty("<#= field.Name #>", <#= field.Value #>, false, false, false);
<# } #>
        }
<# } #>

        public override String Class
        {
            get { return "<#= Model.Name #>"; }
        }
<# if (Model.Getters.Any()) { #>
        
        public override JsValue Get(String propertyName)
        {
<# foreach (var method in Model.Getters) { #>
<# var type = method.Parameters.First().ParameterType; #>
<# if (type == typeof(Int32)) { #>
            var index = default(Int32);

            if (Int32.TryParse(propertyName, out index))
                return Engine.Select(Ref<#= Model.OriginalName #>[index]);

<# } else if (type == typeof(String)) { #>
            if (propertyName != null)
                return Engine.Select(Ref<#= Model.OriginalName #>[propertyName]);

<# } #>
<# } #>
            return base.Get(propertyName);
        }

<# } #>
<# if (Model.Setters.Any()) { #>
        
        public override void Put(String propertyName, JsValue value, Boolean throwOnError)
        {
<# foreach (var method in Model.Setters) { #>
<# var type = method.Parameters.Skip(0).First().ParameterType; #>
<# if (type == typeof(Int32)) { #>
            var index = default(Int32);

            if (Int32.TryParse(propertyName, out index))
            {
                Ref<#= Model.OriginalName #>[index] = <#= method.Converter #>(value);
                return;
            }

<# } else if (type == typeof(String)) { #>
            if (propertyName != null)
            {
                Ref<#= Model.OriginalName #>[propertyName] = <#= method.Converter #>(value);
                return;
            }

<# } #>
<# } #>
            base.Put(propertyName, value, throwOnError);
        }

<# } #>
<# if (Model.Deleters.Any()) { #>
        
        public override Boolean Delete(String propertyName, Boolean throwOnError)
        {
<# foreach (var method in Model.Deleters) { #>
<# var type = method.Parameters.First().ParameterType; #>
<# if (type == typeof(Int32)) { #>
            var index = default(Int32);

            if (Int32.TryParse(propertyName, out index))
            {
                Ref<#= Model.OriginalName #>.<#= method.OriginalName #>(propertyName);
            }

<# } else if (type == typeof(String)) { #>
            if (propertyName != null)
            {
                Ref<#= Model.OriginalName #>.<#= method.OriginalName #>(propertyName);
                return;
            }

<# } #>
<# } #>
            base.Delete(propertyName, throwOnError);
        }
<# } #>

        public <#= Model.OriginalName #><#= Model.GenericArguments #> Ref<#= Model.OriginalName #>
        {
            get;
            set;
        }
    }
}